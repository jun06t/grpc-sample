// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package gateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Group int32

const (
	Group_USER      Group = 0
	Group_ADMIN     Group = 1
	Group_DEVELOPER Group = 2
)

var Group_name = map[int32]string{
	0: "USER",
	1: "ADMIN",
	2: "DEVELOPER",
}
var Group_value = map[string]int32{
	"USER":      0,
	"ADMIN":     1,
	"DEVELOPER": 2,
}

func (x Group) String() string {
	return proto.EnumName(Group_name, int32(x))
}
func (Group) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GetUserRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateUserRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *UpdateUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateUserRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type UserResponse struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *UserResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserResponse) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type UsersResponse struct {
	Group Group           `protobuf:"varint,1,opt,name=group,enum=gateway.Group" json:"group,omitempty"`
	Users []*UserResponse `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *UsersResponse) Reset()                    { *m = UsersResponse{} }
func (m *UsersResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()               {}
func (*UsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *UsersResponse) GetGroup() Group {
	if m != nil {
		return m.Group
	}
	return Group_USER
}

func (m *UsersResponse) GetUsers() []*UserResponse {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserGroup struct {
	Group Group `protobuf:"varint,1,opt,name=group,enum=gateway.Group" json:"group,omitempty"`
}

func (m *UserGroup) Reset()                    { *m = UserGroup{} }
func (m *UserGroup) String() string            { return proto.CompactTextString(m) }
func (*UserGroup) ProtoMessage()               {}
func (*UserGroup) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *UserGroup) GetGroup() Group {
	if m != nil {
		return m.Group
	}
	return Group_USER
}

func init() {
	proto.RegisterType((*GetUserRequest)(nil), "gateway.GetUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "gateway.UpdateUserRequest")
	proto.RegisterType((*UserResponse)(nil), "gateway.UserResponse")
	proto.RegisterType((*UsersResponse)(nil), "gateway.UsersResponse")
	proto.RegisterType((*UserGroup)(nil), "gateway.UserGroup")
	proto.RegisterEnum("gateway.Group", Group_name, Group_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserByGroup(ctx context.Context, in *UserGroup, opts ...grpc.CallOption) (*UsersResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/gateway.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByGroup(ctx context.Context, in *UserGroup, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := grpc.Invoke(ctx, "/gateway.UserService/GetUserByGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gateway.UserService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	GetUserByGroup(context.Context, *UserGroup) (*UsersResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*Empty, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.UserService/GetUserByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByGroup(ctx, req.(*UserGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByGroup",
			Handler:    _UserService_GetUserByGroup_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x6b, 0xe2, 0x40,
	0x18, 0x86, 0x37, 0xd1, 0xac, 0x9b, 0x4f, 0xcd, 0x66, 0x3f, 0x70, 0x37, 0x84, 0x3d, 0x84, 0xb0,
	0x07, 0x51, 0x30, 0xac, 0x7b, 0xdb, 0xdb, 0x2e, 0x06, 0x91, 0xd6, 0x5a, 0x22, 0xf6, 0x3e, 0x36,
	0x43, 0x08, 0x68, 0x26, 0xcd, 0x8c, 0x16, 0x29, 0xbd, 0xf4, 0x2f, 0xf4, 0xa7, 0xf5, 0x2f, 0xf4,
	0x57, 0xf4, 0x54, 0x32, 0x91, 0x44, 0x4b, 0x29, 0xa5, 0xb7, 0xc9, 0x9b, 0x77, 0x9e, 0x79, 0x79,
	0xbf, 0x0f, 0x60, 0xc3, 0x69, 0x36, 0x48, 0x33, 0x26, 0x18, 0x36, 0x22, 0x22, 0xe8, 0x35, 0xd9,
	0xd9, 0x3f, 0x23, 0xc6, 0xa2, 0x15, 0xf5, 0x48, 0x1a, 0x7b, 0x24, 0x49, 0x98, 0x20, 0x22, 0x66,
	0x09, 0x2f, 0x6c, 0x76, 0x93, 0xac, 0xe2, 0x2d, 0x2d, 0x3e, 0x5c, 0x07, 0x8c, 0x31, 0x15, 0x0b,
	0x4e, 0xb3, 0x80, 0x5e, 0x6d, 0x28, 0x17, 0x68, 0x80, 0x1a, 0x87, 0x96, 0xe2, 0x28, 0x5d, 0x3d,
	0x50, 0xe3, 0xd0, 0x9d, 0xc0, 0xb7, 0x45, 0x1a, 0x12, 0x41, 0xdf, 0x30, 0x21, 0x42, 0x3d, 0x21,
	0x6b, 0x6a, 0xa9, 0x52, 0x91, 0x67, 0x34, 0xa1, 0x46, 0x22, 0x6a, 0xd5, 0x1c, 0xa5, 0xab, 0x05,
	0xf9, 0xd1, 0x1d, 0x41, 0xab, 0x80, 0xf0, 0x94, 0x25, 0x9c, 0x7e, 0x90, 0xb2, 0x84, 0x76, 0x4e,
	0xe1, 0x25, 0xe6, 0x17, 0x68, 0x51, 0xc6, 0x36, 0xa9, 0x24, 0x19, 0x43, 0x63, 0xb0, 0xef, 0x61,
	0x30, 0xce, 0xd5, 0xa0, 0xf8, 0x89, 0x7d, 0xd0, 0xf2, 0xae, 0xb8, 0xa5, 0x3a, 0xb5, 0x6e, 0x73,
	0xd8, 0x29, 0x5d, 0x87, 0x91, 0x82, 0xc2, 0xe3, 0xfe, 0x06, 0x3d, 0x97, 0x25, 0xe0, 0x7d, 0xfc,
	0x5e, 0x1f, 0xb4, 0xc2, 0xfe, 0x05, 0xea, 0x8b, 0xb9, 0x1f, 0x98, 0x9f, 0x50, 0x07, 0xed, 0xdf,
	0x68, 0x3a, 0x39, 0x33, 0x15, 0x6c, 0x83, 0x3e, 0xf2, 0x2f, 0xfc, 0xd3, 0xd9, 0xb9, 0x1f, 0x98,
	0xea, 0xf0, 0x49, 0x81, 0x66, 0xfe, 0xc0, 0x9c, 0x66, 0xdb, 0xf8, 0x92, 0xe2, 0x14, 0x1a, 0xfb,
	0x31, 0xe0, 0x8f, 0x0a, 0x7f, 0x34, 0x18, 0xfb, 0xf5, 0xc4, 0x2e, 0xde, 0x3d, 0x3c, 0xde, 0xab,
	0x2d, 0x04, 0x2f, 0x8f, 0xee, 0xdd, 0xc4, 0xe1, 0x2d, 0x9e, 0x94, 0x53, 0xfd, 0xbf, 0x2b, 0x42,
	0xe1, 0xd1, 0x65, 0xa9, 0xd9, 0xdf, 0x8f, 0xb4, 0xb2, 0x4f, 0xb7, 0x2d, 0x89, 0x0d, 0xd4, 0x24,
	0x11, 0x67, 0x00, 0xd5, 0x02, 0xa0, 0x5d, 0x5d, 0x7a, 0xb9, 0x15, 0x76, 0xd5, 0x8c, 0xbf, 0x4e,
	0xc5, 0xce, 0xed, 0x48, 0xd0, 0x57, 0xfb, 0x20, 0xda, 0x5f, 0xa5, 0xb7, 0xfc, 0x2c, 0x57, 0xef,
	0xcf, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xb5, 0x7b, 0x7b, 0xbc, 0x02, 0x00, 0x00,
}
