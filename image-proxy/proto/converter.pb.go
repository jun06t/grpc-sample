// Code generated by protoc-gen-go. DO NOT EDIT.
// source: converter.proto

package converter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConvertRequest struct {
	// Types that are valid to be assigned to Value:
	//	*ConvertRequest_Meta
	//	*ConvertRequest_Chunk
	Value                isConvertRequest_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ConvertRequest) Reset()         { *m = ConvertRequest{} }
func (m *ConvertRequest) String() string { return proto.CompactTextString(m) }
func (*ConvertRequest) ProtoMessage()    {}
func (*ConvertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03eb4403ca9b02d, []int{0}
}

func (m *ConvertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertRequest.Unmarshal(m, b)
}
func (m *ConvertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertRequest.Marshal(b, m, deterministic)
}
func (m *ConvertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertRequest.Merge(m, src)
}
func (m *ConvertRequest) XXX_Size() int {
	return xxx_messageInfo_ConvertRequest.Size(m)
}
func (m *ConvertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertRequest proto.InternalMessageInfo

type isConvertRequest_Value interface {
	isConvertRequest_Value()
}

type ConvertRequest_Meta struct {
	Meta *Meta `protobuf:"bytes,1,opt,name=meta,proto3,oneof"`
}

type ConvertRequest_Chunk struct {
	Chunk *Chunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*ConvertRequest_Meta) isConvertRequest_Value() {}

func (*ConvertRequest_Chunk) isConvertRequest_Value() {}

func (m *ConvertRequest) GetValue() isConvertRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ConvertRequest) GetMeta() *Meta {
	if x, ok := m.GetValue().(*ConvertRequest_Meta); ok {
		return x.Meta
	}
	return nil
}

func (m *ConvertRequest) GetChunk() *Chunk {
	if x, ok := m.GetValue().(*ConvertRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConvertRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConvertRequest_Meta)(nil),
		(*ConvertRequest_Chunk)(nil),
	}
}

type Meta struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Quality              string   `protobuf:"bytes,3,opt,name=quality,proto3" json:"quality,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03eb4403ca9b02d, []int{1}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Meta) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Meta) GetQuality() string {
	if m != nil {
		return m.Quality
	}
	return ""
}

type Chunk struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Position             int64    `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03eb4403ca9b02d, []int{2}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Chunk) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type ConvertResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Position             int64    `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConvertResponse) Reset()         { *m = ConvertResponse{} }
func (m *ConvertResponse) String() string { return proto.CompactTextString(m) }
func (*ConvertResponse) ProtoMessage()    {}
func (*ConvertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03eb4403ca9b02d, []int{3}
}

func (m *ConvertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertResponse.Unmarshal(m, b)
}
func (m *ConvertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertResponse.Marshal(b, m, deterministic)
}
func (m *ConvertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertResponse.Merge(m, src)
}
func (m *ConvertResponse) XXX_Size() int {
	return xxx_messageInfo_ConvertResponse.Size(m)
}
func (m *ConvertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertResponse proto.InternalMessageInfo

func (m *ConvertResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConvertResponse) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func init() {
	proto.RegisterType((*ConvertRequest)(nil), "converter.ConvertRequest")
	proto.RegisterType((*Meta)(nil), "converter.Meta")
	proto.RegisterType((*Chunk)(nil), "converter.Chunk")
	proto.RegisterType((*ConvertResponse)(nil), "converter.ConvertResponse")
}

func init() { proto.RegisterFile("converter.proto", fileDescriptor_c03eb4403ca9b02d) }

var fileDescriptor_c03eb4403ca9b02d = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x05, 0x0a, 0x22, 0xa3, 0x29, 0x66, 0x4e, 0xc8, 0xc9, 0x6c, 0x62, 0xc2, 0xa9, 0x31, 0xf5,
	0xe0, 0x59, 0x31, 0xa6, 0x17, 0x2f, 0xeb, 0x17, 0xac, 0x65, 0x12, 0x57, 0x2b, 0x4b, 0x61, 0xb7,
	0x49, 0xff, 0xde, 0x30, 0xb4, 0x88, 0x89, 0x97, 0xde, 0xe6, 0xbd, 0x79, 0xf3, 0x66, 0xdf, 0x0e,
	0xa4, 0x6b, 0x53, 0xef, 0xa8, 0xb5, 0xd4, 0x2e, 0x9a, 0xd6, 0x58, 0x83, 0xc9, 0x48, 0x88, 0x4f,
	0x98, 0x97, 0x03, 0x90, 0xb4, 0x75, 0xd4, 0x59, 0xbc, 0x85, 0xf0, 0x9b, 0xac, 0xca, 0xfc, 0x1b,
	0xbf, 0xb8, 0x58, 0xa6, 0x8b, 0xdf, 0xe1, 0x57, 0xb2, 0x6a, 0xe5, 0x49, 0x6e, 0x63, 0x01, 0xd1,
	0xfa, 0xc3, 0xd5, 0x5f, 0x59, 0xc0, 0xba, 0xab, 0x89, 0xae, 0xec, 0xf9, 0x95, 0x27, 0x07, 0xc1,
	0x53, 0x0c, 0xd1, 0x4e, 0x6d, 0x1c, 0x89, 0x67, 0x08, 0x7b, 0x0b, 0x9c, 0x43, 0xa0, 0x2b, 0xf6,
	0x4f, 0x64, 0xa0, 0x2b, 0x44, 0x08, 0xed, 0xbe, 0x21, 0x76, 0x4a, 0x24, 0xd7, 0x98, 0x41, 0xbc,
	0x75, 0x6a, 0xa3, 0xed, 0x3e, 0x9b, 0x31, 0x7d, 0x84, 0xe2, 0x01, 0x22, 0x5e, 0xd0, 0x8f, 0x55,
	0xea, 0xf0, 0xd0, 0x4b, 0xc9, 0x35, 0xe6, 0x70, 0xde, 0x98, 0x4e, 0x5b, 0x6d, 0x6a, 0xb6, 0x9b,
	0xc9, 0x11, 0x8b, 0x47, 0x48, 0xc7, 0xa8, 0x5d, 0x63, 0xea, 0x8e, 0x4e, 0xb5, 0x58, 0xbe, 0x41,
	0x52, 0x1e, 0x63, 0xe2, 0x0b, 0xc4, 0x07, 0x80, 0xd7, 0xd3, 0xf4, 0x7f, 0xbe, 0x33, 0xcf, 0xff,
	0x6b, 0x0d, 0xeb, 0x85, 0x57, 0xf8, 0x77, 0xfe, 0xfb, 0x19, 0x1f, 0xe5, 0xfe, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x9f, 0x36, 0x75, 0x36, 0xa7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConverterClient is the client API for Converter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConverterClient interface {
	Convert(ctx context.Context, opts ...grpc.CallOption) (Converter_ConvertClient, error)
}

type converterClient struct {
	cc *grpc.ClientConn
}

func NewConverterClient(cc *grpc.ClientConn) ConverterClient {
	return &converterClient{cc}
}

func (c *converterClient) Convert(ctx context.Context, opts ...grpc.CallOption) (Converter_ConvertClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Converter_serviceDesc.Streams[0], "/converter.Converter/Convert", opts...)
	if err != nil {
		return nil, err
	}
	x := &converterConvertClient{stream}
	return x, nil
}

type Converter_ConvertClient interface {
	Send(*ConvertRequest) error
	Recv() (*ConvertResponse, error)
	grpc.ClientStream
}

type converterConvertClient struct {
	grpc.ClientStream
}

func (x *converterConvertClient) Send(m *ConvertRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *converterConvertClient) Recv() (*ConvertResponse, error) {
	m := new(ConvertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConverterServer is the server API for Converter service.
type ConverterServer interface {
	Convert(Converter_ConvertServer) error
}

// UnimplementedConverterServer can be embedded to have forward compatible implementations.
type UnimplementedConverterServer struct {
}

func (*UnimplementedConverterServer) Convert(srv Converter_ConvertServer) error {
	return status.Errorf(codes.Unimplemented, "method Convert not implemented")
}

func RegisterConverterServer(s *grpc.Server, srv ConverterServer) {
	s.RegisterService(&_Converter_serviceDesc, srv)
}

func _Converter_Convert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConverterServer).Convert(&converterConvertServer{stream})
}

type Converter_ConvertServer interface {
	Send(*ConvertResponse) error
	Recv() (*ConvertRequest, error)
	grpc.ServerStream
}

type converterConvertServer struct {
	grpc.ServerStream
}

func (x *converterConvertServer) Send(m *ConvertResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *converterConvertServer) Recv() (*ConvertRequest, error) {
	m := new(ConvertRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Converter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "converter.Converter",
	HandlerType: (*ConverterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Convert",
			Handler:       _Converter_Convert_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "converter.proto",
}
