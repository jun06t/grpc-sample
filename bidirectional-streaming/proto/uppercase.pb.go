// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uppercase.proto

/*
Package uppercase is a generated protocol buffer package.

It is generated from these files:
	uppercase.proto

It has these top-level messages:
	UppercaseRequest
	UppercaseResponse
*/
package uppercase

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UppercaseRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *UppercaseRequest) Reset()                    { *m = UppercaseRequest{} }
func (m *UppercaseRequest) String() string            { return proto.CompactTextString(m) }
func (*UppercaseRequest) ProtoMessage()               {}
func (*UppercaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UppercaseRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UppercaseResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *UppercaseResponse) Reset()                    { *m = UppercaseResponse{} }
func (m *UppercaseResponse) String() string            { return proto.CompactTextString(m) }
func (*UppercaseResponse) ProtoMessage()               {}
func (*UppercaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UppercaseResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UppercaseRequest)(nil), "uppercase.UppercaseRequest")
	proto.RegisterType((*UppercaseResponse)(nil), "uppercase.UppercaseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UppercaseService service

type UppercaseServiceClient interface {
	Transform(ctx context.Context, opts ...grpc.CallOption) (UppercaseService_TransformClient, error)
}

type uppercaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewUppercaseServiceClient(cc *grpc.ClientConn) UppercaseServiceClient {
	return &uppercaseServiceClient{cc}
}

func (c *uppercaseServiceClient) Transform(ctx context.Context, opts ...grpc.CallOption) (UppercaseService_TransformClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UppercaseService_serviceDesc.Streams[0], c.cc, "/uppercase.UppercaseService/Transform", opts...)
	if err != nil {
		return nil, err
	}
	x := &uppercaseServiceTransformClient{stream}
	return x, nil
}

type UppercaseService_TransformClient interface {
	Send(*UppercaseRequest) error
	Recv() (*UppercaseResponse, error)
	grpc.ClientStream
}

type uppercaseServiceTransformClient struct {
	grpc.ClientStream
}

func (x *uppercaseServiceTransformClient) Send(m *UppercaseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uppercaseServiceTransformClient) Recv() (*UppercaseResponse, error) {
	m := new(UppercaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UppercaseService service

type UppercaseServiceServer interface {
	Transform(UppercaseService_TransformServer) error
}

func RegisterUppercaseServiceServer(s *grpc.Server, srv UppercaseServiceServer) {
	s.RegisterService(&_UppercaseService_serviceDesc, srv)
}

func _UppercaseService_Transform_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UppercaseServiceServer).Transform(&uppercaseServiceTransformServer{stream})
}

type UppercaseService_TransformServer interface {
	Send(*UppercaseResponse) error
	Recv() (*UppercaseRequest, error)
	grpc.ServerStream
}

type uppercaseServiceTransformServer struct {
	grpc.ServerStream
}

func (x *uppercaseServiceTransformServer) Send(m *UppercaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uppercaseServiceTransformServer) Recv() (*UppercaseRequest, error) {
	m := new(UppercaseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UppercaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uppercase.UppercaseService",
	HandlerType: (*UppercaseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transform",
			Handler:       _UppercaseService_Transform_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "uppercase.proto",
}

func init() { proto.RegisterFile("uppercase.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2d, 0x28, 0x48,
	0x2d, 0x4a, 0x4e, 0x2c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xe9, 0x70, 0x09, 0x84, 0xc2, 0x38, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c,
	0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30,
	0xae, 0x92, 0x2e, 0x97, 0x20, 0x92, 0xea, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xdc, 0xca, 0x8d,
	0x12, 0x90, 0x0c, 0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xf2, 0xe1, 0xe2, 0x0c, 0x29,
	0x4a, 0xcc, 0x2b, 0x4e, 0xcb, 0x2f, 0xca, 0x15, 0x92, 0xd6, 0x43, 0x38, 0x0d, 0xdd, 0x19, 0x52,
	0x32, 0xd8, 0x25, 0x21, 0xb6, 0x2a, 0x31, 0x68, 0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81, 0x3d, 0x64,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x7b, 0x75, 0x39, 0xe3, 0x00, 0x00, 0x00,
}
